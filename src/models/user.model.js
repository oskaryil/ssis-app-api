/**
 * This notation was generated by templates.
 * // -------------------------------------------------
 * @description
 * @file user.model.js
 * @author: Oskar Yildiz <oskar> 2018-02-16T14:29:41+01:00
 * // -------------------------------------------------
 * Make sure this file is part of its proper namespace
 * and project before moving on.
 * // -------------------------------------------------
 * Code-tags conventionally should be used (See below) :
 * TODO - Something that someone need to do.
 * DOING - Self remind for what you are doing.
 * CONSIDER - Reminder to consider a change or addition.
 * BUG - The below section of a code cause a bug.
 * FIXME - The below section of code need to be fixed.
 * HACK - The below section of code is a workaround.
 * XXX - Any notation important enough to consider implementing.
 * CLARIFY - Very incomprehensible section of code below.
 *
 * Created by Oskar Yildiz <oskar> on 2018-02-16T14:29:41+01:00.
 * Last modified by oskar on 2018-02-16T14:29:41+01:00
 *
 */

import { Model } from 'objection';
import { hashSync, compareSync } from 'bcrypt-nodejs';

import constants from '../config/constants';
import { createToken } from '../helpers/auth.helper';

export default class User extends Model {
  static get tableName() {
    return 'users';
  }

  static get jsonSchema() {
    return {
      type: 'object',
      required: ['username', 'password', 'email'],
      properties: {
        id: { type: 'integer' },
        user_uuid: { type: 'string' },
        usernane: { type: 'string', minLength: 1, maxLength: 10 },
        password: { type: 'string' },
        class: { type: 'string', minLength: 5, maxLength: 5 },
        name: { type: 'string', minLength: 1, maxLength: 25 },
      },
    };
  }

  _hashPassword(password) {
    return hashSync(password);
  }

  authenticateUser(password) {
    return compareSync(password, this.password);
  }

  /**
   * @function toAuthJSON
   *
   * @description Returns an object with necessary information about a user
   *
   *
   *
   * @returns {Promise} A promise with the user object and token
   */
  toAuthJSON() {
    return {
      name: this.name,
      class: this.class,
      user_uuid: this.user_uuid,
      token: `JWT ${createToken({
        userUUID: this.user_uuid,
        JWT_SECRET: constants.JWT_SECRET,
      })}`,
      email: this.email,
      id: this.id,
    };
  }

  $beforeInsert() {
    const hashedPassword = this._hashPassword(this.password);
    this.password = hashedPassword;
  }

  $afterInsert() {}
}
